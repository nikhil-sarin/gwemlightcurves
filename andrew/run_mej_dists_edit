#!/usr/bin/env python

"""generate a KDE for mass ratio conditioned on a chirp mass based on a set of samples
"""

#-------------------------------------------------
from __future__ import division
import matplotlib
font = {'family' : 'normal',
        'weight' : 'normal',
        'size'   : 16}
matplotlib.rc('xtick', labelsize=16)
matplotlib.rc('ytick', labelsize=16)
matplotlib.rc('font', **font)
from argparse import ArgumentParser
import numpy as np
import astropy.units as u
from astropy.table import (Table, Column, vstack)
from astropy.coordinates import SkyCoord, EarthLocation
from astropy.cosmology import Planck15 as cosmo
from astropy.cosmology import z_at_value
from astropy.time import Time
from astropy.io import ascii
import pickle
import argparse
import sys
import os
import requests
import glob
import scipy.stats as ss
from scipy.stats import rv_continuous
from scipy.integrate import quad
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from pandas import read_csv, DataFrame
import healpy as hp
from ligo.skymap import postprocess, distance
from ligo.skymap.io import fits
from matplotlib.lines import Line2D
from matplotlib.colors import LogNorm
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import math
import pandas as pd



### non-standard libraries

from kilonova_lightcurves.KNModels import KNTable
from kilonova_lightcurves import __version__
from kilonova_lightcurves.EOS.EOS4ParameterPiecewisePolytrope import EOS4ParameterPiecewisePolytrope
#from twixie import kde
from kilonova_lightcurves import lightcurve_utils
from mass_grid_fast import run_EOS
#-------------------------------------------------

#-------------------------------------------------
#data = np.loadtxt('/home/michael.coughlin/kilonova_lightcurves/plots/limits/Ka2017_FixZPT0/g_r/0_3/ejecta/GW190425/-9.00/0.10/2-post_equal_weights.dat', usecols = 1)
#print(data_test)


#events = ['GW190425', 'GW190901', 'S191205ah', 'S191213g', 'S191216ap', 'S200105ae', 'S200115j', 'S200213t']
#events = ['GW190425', 'S191205ah', 'S191213g', 'S200105ae', 'S200115j', 'S200213t']
#lans = ['-1.00', '-2.00', '-3.00', '-4.00', '-5.00', '-9.00']
#event_prob = np.array([0.2390, 0.5157, 0.7837, 0.4939, 0.3117, 0.2892, 0.1922, 0.4342, 0.0485, 0.009, 0.4796, 0.1817, 0.7608])

#event_prob = np.array([0.2413, 0.5233, 0.8857, 0.5694, 0.3299, 0.3326, 0.3899, 0.5063, 0.0568, 0.2750, 0.5239, 0.2221, 0.7217])
#event_names = ['GW190425', 'S190426c','GW190814', 'S190901ap', 'S190910d', 'S190910h', 'S190923y', 'S190930t', 'S191205ah', 'S191213g', 'S200105ae', 'S200115j', 'S200213t']
#event_names = ['GW190425']



#------------------------------------------------------------------ 
'''
The number of points to evaluate the KDE at and plot
'''
mass_points = 100
#mass_points = 10
'''
Determines the number of masses to draw from the inital mass dists, should be >1000. uniform_mass_draws can be
less than mass_draws, as the uniform dists are easier to sample/converge quicker
'''
mass_draws = 2000
#mass_draws = 20
uniform_mass_draws = int(mass_draws/2)
#uniform_mass_draws = 20

mass = np.linspace(-5, .5, mass_points) 


def greedy_kde_areas_1d(pts):

    pts = np.random.permutation(pts)
    mu = np.mean(pts, axis=0)

    Npts = pts.shape[0]
    kde_pts = pts[:int(Npts/2)]
    den_pts = pts[int(Npts/2):]

    kde = ss.gaussian_kde(kde_pts.T)

    kdedir = {}
    kdedir["kde"] = kde
    kdedir["mu"] = mu

    return kdedir

def kde_eval(kdedir,truth):

    kde = kdedir["kde"]
    mu = kdedir["mu"]
    L = kdedir["L"]

    truth = np.linalg.solve(L, truth-mu)
    td = kde(truth)

    return td

def kde_eval_single(kdedir,truth):

    kde = kdedir["kde"]
    mu = kdedir["mu"]
    td = kde(truth)

    return td


def alsing_pdf(m):
        mu1, sig1, mu2, sig2, a = 1.34, 0.07, 1.8, 0.21, 2.12
        PDF1 = a/(sig1*np.sqrt(2*np.pi))*np.exp(-((m-mu1)/(np.sqrt(2)*sig1))**2)
        PDF2 = a/(sig2*np.sqrt(2*np.pi))*np.exp(-((m-mu2)/(np.sqrt(2)*sig2))**2)
        PDF = PDF1+PDF2
        return PDF

def farrow_pdf(m):
        mu1, sig1, mu2, sig2, a = 1.34, 0.02, 1.47, 0.15, 0.68
        PDF1 = a/(sig1*np.sqrt(2*np.pi))*np.exp(-((m-mu1)/(np.sqrt(2)*sig1))**2)
        PDF2 = (1-a)/(sig2*np.sqrt(2*np.pi))*np.exp(-((m-mu2)/(np.sqrt(2)*sig2))**2)
        PDF = PDF1+PDF2
        return PDF
    
def zhu_pdf(m):
        a1, a2, a3, b1, b2, b3 = .002845, 1.04e11, 799.1, 1.686, 2.1489, .2904
        PDF = 1/(1/(a1*np.exp(b1*m))+1/(a2*np.exp(-b2*m)+a3*np.exp(-b3*m)))
        return PDF


class alsing_dist(rv_continuous):        
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.normalize, _ = quad(alsing_pdf, self.a, self.b)

    def _pdf(self, m):
        return alsing_pdf(m) / self.normalize  

    
class farrow_dist(rv_continuous):        
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.normalize, _ = quad(farrow_pdf, self.a, self.b)

    def _pdf(self, m):
        return farrow_pdf(m) / self.normalize  
    

class zhu_dist(rv_continuous):        
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.normalize, _ = quad(zhu_pdf, self.a, self.b)

    def _pdf(self, m):
        return zhu_pdf(m) / self.normalize  
    

a_dist = alsing_dist(a=1.1,b=2.8)
f_dist = farrow_dist(a=1.1,b=2.8)
z_dist = zhu_dist(a=2.8,b=25)


def run_theoretical(Type, lan, chi, EOS):
    '''function to generate mass grid using EOS, should probably be left as is
    '''
    chi_list = [chi]
    data = []
    Type2=Type
    chirp_q_tf = False
    twixie_tf = False
 
    print(Type)
    #check_vals = open('samples_'+str(Type2)+'.txt', 'w')
    #mej_theta = open('mej_theta_data_'+str(Type2)+'.txt', 'w')
    for chi in chi_list:
        #-----------------------------------------------------------
        '''
        Determines grid of masses to use for mass grid
        '''
        #----------------------------------------------------------
        if Type == 'NSBH_uniform':
            m2 = 1.1*np.ones(uniform_mass_draws)+1.7*np.random.rand(uniform_mass_draws)
            m1 = 3*np.ones(uniform_mass_draws)+5*np.random.rand(uniform_mass_draws)
            Type = 'NSBH'
        if Type == 'BNS_uniform':
            m1 = 1.1*np.ones(uniform_mass_draws)+1.7*np.random.rand(uniform_mass_draws)
            m2 = 1.1*np.ones(uniform_mass_draws)+1.7*np.random.rand(uniform_mass_draws)
            Type = 'BNS'
        if Type == 'BNS_alsing':
            m_a = a_dist.rvs(size = mass_draws)
            m_b = a_dist.rvs(size = mass_draws)
            m1_list = []
            m2_list = []
            #sort to make sure m1 > m2
            for i in range(len(m_a)):
                if m_a[i] >= m_b[i]:
                    m1_list.append(m_a[i])
                    m2_list.append(m_b[i])
                else:
                    m1_list.append(m_b[i])
                    m2_list.append(m_a[i])
            m1 = np.array(m1_list)
            m2 = np.array(m2_list)
            Type = 'BNS' 
        if Type == 'BNS_farrow':

            m_a = f_dist.rvs(size = mass_draws)
            m_b = 1.1*np.ones(mass_draws)+1.7*np.random.rand(mass_draws)
            m1_list = []
            m2_list = []
            #sort to make sure m1 > m2
            for i in range(len(m_a)):
                if m_a[i] >= m_b[i]:
                    m1_list.append(m_a[i])
                    m2_list.append(m_b[i])
                else:
                    m1_list.append(m_b[i])
                    m2_list.append(m_a[i])
            m1 = np.array(m1_list)
            m2 = np.array(m2_list)
            Type = 'BNS' 
        if Type == 'NSBH_zhu':

            #m2 = 1.33*np.ones(mass_draws)
            m2 = a_dist.rvs(size = mass_draws)
            m1 = z_dist.rvs(size = mass_draws)

            Type = 'NSBH'

        if Type == 'BNS_twixie':
            #-----------------------
            #to be added later
            #m1 = np.arange(1, 2.4, .1)
            #m2 = np.arange(1, 2.4, .1)
            #m1 = np.arange(1, 3.1, .2)
            #m2 = np.arange(1, 3.1, .2)
            m1=[0]
            m2=[0]
            Type = 'BNS'
            twixie_tf =True

        if Type == 'BNS_equal_alsing':
            m1 = a_dist.rvs(size = mass_draws)
            m2 = m1
            Type = 'BNS' 
        if Type == 'BNS_equal_farrow':
            m1 = f_dist.rvs(size = mass_draws)
            m2 = m1
            Type = 'BNS'
        if Type == 'BNS_chirp_q':
            chirp_min, xx, yy = lightcurve_utils.ms2mc(1, 1)
            chirp_max, xx, yy = lightcurve_utils.ms2mc(2.5, 2.5) 
            #m2 becomes q
            #m1 becomes mchirp
            m2 = np.ones(uniform_mass_draws)+np.random.rand(uniform_mass_draws)
            m1 = chirp_min+(chirp_max-chirp_min)*np.random.rand(uniform_mass_draws)
            chirp_q_tf = True
        all_mej_data, all_thetas, all_m1s, all_m2s = np.array([]), np.array([]),np.array([]), np.array([]) 
        all_mchirps, all_qs, all_vej, all_wind_mej, all_dyn_mej = np.array([]), np.array([]), np.array([]), np.array([]), np.array([]) 

 
        medians, stds = [], []
        m1_plot, m2_plot=[], []
        lambdatildes=[]
        term1_plot, term2_plot, term3_plot, term4_plot=[],[],[],[]
        print(Type2)
        print('--------------------------------------------------------------------------')
        for i, m1m in enumerate(m1):
            m2m = m2[i]
            if m1m >= m2m:
                m1m_check = m1m
                m2m_check = m2m
                if Type == 'NSBH':
                    m1m_check = 1
                    m2m_check = .5
                if Type2 == 'BNS_equal':
                    m1m = m2m
                    m1m_check = m2m
                    Type = 'BNS'
                if Type2 == 'BNS_chirp_q':
                    eta1 = lightcurve_utils.q2eta(m2m)
                    m1m_check, m2m_check = lightcurve_utils.mc2ms(m1m, eta1)
                    m2m_check = m1m_check
                    Type = 'BNS'
                if (m1m_check >= m2m_check) and (m1m_check <= 3):
                    print('Initializing '+str(m1m)+' '+str(m2m)+' '+Type2)
                    samples = run_EOS(EOS, m1m, m2m, chi, type_set=Type, twixie = twixie_tf, lan_override = True, lan_override_val = lan, chirp_q=chirp_q_tf)
                    mej_samples = samples['mej']
                    if Type == 'BNS':
                        idx = np.where((samples['lambda2'] > 0) | (samples['lambda1'] > 0))[0]
                        N_idx = len(idx)
                        print('-----------------------------------------------------')
                        print(str(N_idx)+' out of '+str(len(samples))+' were BNS')
                        print('-----------------------------------------------------')
                    if Type == 'NSBH':
                        idx = np.where((samples['lambda2'] > 0) | (samples['lambda1'] <= 1e-6))[0]
                        N_idx = len(idx)
                        print('-----------------------------------------------------')
                        print(str(N_idx)+' out of '+str(len(samples))+' were NSBH')
                        print('-----------------------------------------------------')

                    mej_samples = mej_samples[idx]                    
                    samples = samples[idx]

                    m1_vals = samples['m1']
                    m2_vals = samples['m2']
                    #dist = samples['dist']
                    l1_vals = samples['lambda1']
                    l2_vals = samples['lambda2']
                    dyn_vals = samples['dyn_mej']
                    wind_vals = samples['wind_mej']
                    mej_vals = samples['mej']
                    chi_eff = samples['chi_eff']
                    Xlan = samples['Xlan']
                    c1 = samples['c1']
                    c2 = samples['c2']
                    mb1 = samples['mb1']
                    mb2 = samples['mb2']
                    mchirp = samples['mchirp']
                    eta = samples['eta']
                    q = samples['q']
                    mej = samples['mej']
                    vej = samples['vej']
                    dyn_mej = samples['dyn_mej']
                    wind_mej = samples['wind_mej']
                    mbns = samples['mbns']
                    thetas = samples['theta']
                    #'m1','m2','lambda1','lambda2','chi_eff','Xlan','c1','c2','mb1','mb2','mchirp','eta','q','mej','vej', 'dyn_mej', 'wind_mej', 'mbns'
                    #for l in range(len(samples)):
                    #    check_vals.write(str(m1_vals[l])+' '+str(m2_vals[l])+' '+str(l1_vals[l])+' '+str(l2_vals[l])+' '+str(chi_eff[l])+' '+str(Xlan[l])+' '+str(c1[l])+' '+str(c2[l])+' '+str(mb1[l])+' '+str(mb2[l])+' '+str(mchirp[l])+' '+str(eta[l])+' '+str(q[l])+' '+str(mej_vals[l])+' '+str(vej[l])+' '+str(dyn_vals[l])+' '+str(wind_vals[l])+' '+str(mbns[l])+'\n')
                    #    mej_theta.write(str(mej_samples[l])+' '+str(thetas[l])+'\n') 
                    if len(mej_samples) > 3:
                        mean=np.mean(mej_samples)
                        if math.isnan(mean):
                            mean = 0
                
                        data.append(mean)
                        all_mej_data = np.concatenate((all_mej_data, mej_samples))
                        all_thetas = np.concatenate((all_thetas, thetas))
                        all_m1s = np.concatenate((all_m1s, m1_vals))
                        all_m2s = np.concatenate((all_m2s, m2_vals))
                        all_mchirps = np.concatenate((all_mchirps, mchirp))
                        all_qs = np.concatenate((all_qs, q))
                        all_vej = np.concatenate((all_vej, vej))
                        all_wind_mej = np.concatenate((all_wind_mej, wind_mej))
                        all_dyn_mej = np.concatenate((all_dyn_mej, dyn_mej))



                        samples_gp=samples
                    if len(mej_samples) <= 4:
                        print('----------------------> Too few '+Type+', samples discarded, running next iteration')
                        continue                 
   
                    medians.append(np.median(samples_gp['mej']))
                    stds.append(np.std(samples_gp['mej']))
                    m1_plot.append(m1m)
                    m2_plot.append(m2m)
                   
                    lambdatilde = (16.0/13.0)*(samples_gp['lambda2'] + samples_gp['lambda1']*(samples_gp['q']**5) + 12*samples_gp['lambda1']*(samples_gp['q']**4) + 12*samples['lambda2']*samples['q'])/((samples['q']+1)**5)
                   
        std_med=[]
        m1_0=[]
        m2_0=[]
          
        for num in range(len(stds)):
            check = 0
            if stds[num] < 1e-6:
                stds[num] = np.nan 
                check = 1
            if medians[num] <= 1e-6:
                medians[num] = np.nan
                check = 1
            std_med.append(stds[num]/medians[num])
            if True:    
                if std_med[num] > 10:
                    std_med[num] = 10
                if std_med[num] < .01:
                    std_med[num] = .01
            if Type == 'NSBH':
                if check == 1:
                    m1_0.append(m1_plot[num])
                    m2_0.append(m2_plot[num])               
        
    #check_vals.close()
    #mej_theta.close()
    mean_data=np.array(data)
    mej_theta = np.column_stack((all_mej_data, all_thetas))
    corner_data = np.column_stack((all_m1s, all_m2s, all_mchirps, all_qs, all_vej, all_mej_data, all_wind_mej, all_dyn_mej, all_thetas))
    np.savetxt('./mej_theta_data/mej_theta_data_'+str(Type2)+'.txt', mej_theta)
    np.savetxt('./corner_data/corner_data_'+str(Type2)+'.txt', corner_data)
    return mean_data, all_mej_data



def run_prob(mass, lan, chi, coverage_factors = False, theor = False, Type = None):
    ''' function that uses EOS and generates KDE, the only thing that could be changed here is the EOS type,
        which is now set to gp
    '''
    l = len(mass) 
    prob_events=[]
    prob_norm_events=[] 
    samples=[]
    if theor:
        event_name_list = 'i'
        if Type == None:
            print('Specify BNS or NSBH')
    
    chi_list = [chi]
    for chi in chi_list:
        cov = np.ones(13)
        if coverage_factors == True:
            cov = np.array([0.2390, 0.5157, 0.7837, 0.4939, 0.3117, 0.2892, 0.1922, 0.4342, 0.0485, 0.009, 0.4796, 0.1817, 0.7608]) 
        for e, event in enumerate(event_name_list):
            filename = '/home/michael.coughlin/kilonova_lightcurves/plots/limits/Ka2017_FixZPT0/g_r/0_3/ejecta/'+event+'/'+str(lan)+'/0.10/2-post_equal_weights.dat'
            #dir = '/home/michael.coughlin/kilonova_lightcurves/plots/limits/Ka2017_FixZPT0/g_r/0_3/ejecta/'+event+'/'+lan+'/0.10/'
            prob_list = []
            prob_norm_list = []
            if not os.path.exists(filename):
                if not theor:
                    print(filename+' Not Found')
                    for x in range(l):
                        prob_list.append(1)
                        prob_norm_list.append(1)
                    prob_events.append(np.array(prob_list))
                    prob_norm_events.append(np.array(prob_norm_list))
                    continue
            #if not theor:
            #    data = np.loadtxt(filename, usecols = 1)
            #    all_data=data
            if theor:
                #----------------------------------------------------------------------
                '''
                EOS determined here, usually we use gp, unlikely this needs to be changed
                '''
                #---------------------------------------------------------------------
                EOS_type = 'gp'
                #EOS_type = 'Sly'
                mean_data, all_data = (run_theoretical(Type, lan, chi, EOS_type))
                shape = np.shape(all_data)
                num = 1
 
                for n in range(len(shape)):
                    num = num * shape[n]
                
                all_data = np.reshape(np.array(all_data), (np.int(num)))
                 
                all_data[all_data > 1e0] = 1e0
                all_data[all_data <= 1e-6] = 1e-12
                #datafilename = '/home/andrew.toivonen/public_html/'+str(Type)+'_data.txt'
                #np.savetxt(datafilename, np.array(all_data))
                
                all_data = np.log10(all_data)
            print('Initializing '+str(event)+' '+str(lan))
            print('-----------------------------')
            KDE = greedy_kde_areas_1d(all_data)
        
        
            Nsamples = 1e4
            if Nsamples < 1e3: 
                print('Nsamples may be too small')
            limit = 1
            limit_norm = 1
                
            for i,m in enumerate(mass):
                p_samples = []
                p_norm_samples =[]
                for c in range(int(Nsamples)):
                    if not theor:
                        prob = kde_eval_single(KDE, 10**m)[0]
                        prob_norm = kde_eval_single(KDE, .001)[0]
                        prob_norm =1
                    if theor: 
                        prob = kde_eval_single(KDE, m)[0]
                        prob_norm = kde_eval_single(KDE, -3)[0]
                        prob_norm =1
                    thresh = np.random.uniform(0,1)
                    if prob > thresh:
                        p_samples.append(cov[e]*prob)
                        p_norm_samples.append(cov[e]*prob_norm)


                prob_list.append(np.mean(p_samples))
                prob_norm_list.append((np.mean(p_norm_samples)))
            prob_events.append(np.array(prob_list))
            prob_norm_events.append(np.array(prob_norm_list))

            if True:

                data_out = (all_data)
                mej_test = mass
        
                print(Type)

                prob_kde=[]
                for m in mej_test:
                    kde_test = kde_eval_single(KDE, m)
                    prob_kde.append(kde_test)
                mej_norm = kde_eval_single(KDE, 1e-3)
                mej_norm=1
                prob_kde = np.array(prob_kde)
                prob_kde = prob_kde / np.sum(prob_kde)
                mej_probs = prob_kde
    if theor:
        return mej_probs, mej_norm, mej_test, chi, EOS_type
    if not theor:
        return np.array(prob_events), np.array(prob_norm_events) 


def plot(mass, prob_events, prob_norm_events, lan, chi, coverage_factors=False):
    '''function to plot PDFs and save PDF data to file
    '''

    #if coverage_factors == True:    
        #event_prob = np.array([0.2390, 0.5157, 0.7837, 0.4939, 0.3117, 0.2892, 0.1922, 0.4342, 0.0485, 0.009, 0.4796, 0.1817, 0.7608])


    #event_names = ['GW190425', 'S190426c','GW190814', 'S190901ap', 'S190910d', 'S190910h', 'S190923y', 'S190930t', 'S191205ah', 'S191213g', 'S200105ae', 'S200115j', 'S200213t']
    colors = ['blue', 'gold', 'black', 'dodgerblue', 'firebrick', 'c', 'peru', 'saddlebrown', 'goldenrod', 'indigo', 'r', 'orange', 'blueviolet']
 
    mej_kde = []
    plot_mass = 10**mass
    labels = ['BNS (Alsing et al.)', 'BNS (Farrow et al.)', 'BNS, m1=m2 (Alsing et al.)', 'BNS, m1=m2 (Farrow et al.)',  'BNS, Uniform in m1, m2', 'NSBH, Uniform in m1, m2', 'NSBH (Alsing et al., Zhu et al.)', 'BNS, Uniform in chirp, q'] 
    Types = ['BNS_alsing','BNS_farrow','BNS_equal_alsing','BNS_equal_farrow','BNS_uniform','NSBH_uniform','NSBH_zhu','BNS_chirp_q']
    #Types = ['BNS_alsing']
    fig, ax = plt.subplots(figsize=(16, 12))
    for n, t in enumerate(Types):
        prob_events, prob_norm_events, mej_test, chi, EOS_type = run_prob(mass, lan, chi, theor = True, Type = t)
        prob_events = np.reshape(prob_events,len(prob_events)) 
        ones = np.ones(len(prob_events))
        norm = np.max(prob_events)
        cdf = np.cumsum(prob_events)/norm
        pdf = prob_events/norm

        ax.plot(plot_mass, pdf, color=colors[n], label=labels[n])

        mej_kde.append(pdf) 

    ax.plot([.03,.03],[1e-6,1e6], color = 'black', linestyle='--')
    ax.plot([.05,.05],[1e-6,1e6], color = 'black', linestyle='--')
    ax.set_yscale('log')
    ax.set_xscale('log')
    #ax.set_xlim(-9.8, -20.2)
    plt.ylim(1e-3,1.1)
    plt.xlabel('mej')
    plt.ylabel('Probability')
    plt.legend()
    plt.grid()

    
    plotname = './output/KDE_comp_edit.pdf'
    plt.savefig(plotname)
    plt.close(fig)

#---------------------------------------------------------------------------------
'''
CODE TO RUN SCRIPT AND GENERATE PLOTS

The plot code for CDFs is below, PDF's are generated above
'''
#---------------------------------------------------------------------------------



#use this to loops over all lan frac (which only affects lightcurves) so you shouldn't have to change this
lan_list = ['-1.00', '-2.00', '-3.00', '-4.00', '-5.00', '-9.00']
#use this if concerned with CDF/PDFs
lan_list = ['-9.00']

#use this to loop over range of spin values for NSBH
chi_list = [-.75, -.5, -.25, 0, .25, .5, .75]
#only run spin 0 (which is what your original PDF was of)
chi_list=[0]

#leave True
plot_list=[]
for lan in lan_list:
    #print(lan)
    for chi in chi_list:
        #print(chi)
        cov_tf = False 
        prob_events, prob_norm_events = np.ones(100), np.ones(100)
        #plot_bns, plot_nsbh, data_bns_equal, mass_plot, EOS_type = plot(mass, prob_events, prob_norm_events, np.float(lan), chi, coverage_factors = cov_tf, theoretical=add_theory_line)
        #plot_list.append(plot_nsbh)
        plot(mass, prob_events, prob_norm_events, np.float(lan), chi, coverage_factors = cov_tf)

